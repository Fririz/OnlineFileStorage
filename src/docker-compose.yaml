services:
#  identity-service
  identity-service:
    build:
      context: .
      dockerfile: Services/IdentityService/IdentityService.API/Dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      postgres-identity-service:
        condition: service_started
#idenetity-service-bd
  postgres-identity-service:
    image: postgres:13.2-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: identityServiceDb
    ports:
      - "5432:5432"
#fileapiservice
  fileapiservice:
    build:
      context: .
      dockerfile: Services/FileApiService/FileApiService.API/Dockerfile
    ports:
      - "8082:8082"
    
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8082
    #fileapiservicebd
  postgres-fileapi-service:
        image: postgres:13.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: fileApiServiceDb
        ports:
          - "5433:5433"
        command: -c port=5433


    #filestorageservice
  filestorageservice:
      build:
        context: .
        dockerfile: Services/FileStorageService/FileStorageService.API/Dockerfile
      ports:
        - "8083:8083"
      restart: unless-stopped
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ASPNETCORE_URLS=http://0.0.0.0:8083
        - Minio__Endpoint=minio:9000
        - Minio__AccessKey=minio
        - Minio__SecretKey=minio123
        - Minio__BucketName=files
        - Minio__WithSSL=false

    #minio for filestorageservice
  minio:
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 3s
      retries: 20
  
  
  #ocelot
  ocelot:
    build:
      context: .
      dockerfile: Gateway/OcelotApiGateway/Dockerfile
    ports:
      - "6002:8080"
    restart: unless-stopped
        

        
#pgadmin
  pg-admin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres-identity-service:
        condition: service_started
        
#elk
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
        
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch